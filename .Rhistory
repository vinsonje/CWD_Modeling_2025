fams.in.range = subset(pop.out, pop.out[,3] %in% poss.cells)
if(length(S.disp.ind)>0){
for(S in 1:length(S.disp.ind)){
disp.move = rgamma(1, shape = disp.dist[1], scale = disp.dist[2])
poss.cells = which(dist < disp.move)
if(length(poss.cells)>1){
S.cell.moved = sample(poss.cells, 1, replace = FALSE)
}else{S.cell.moved = poss.cells}
fam.ind = which(pop.out[,3] == S.cell.moved[S])
pop.out[fam.ind, 1] = pop.out[fam.ind, 1] + 1
pop.out[fam.ind, 8] = pop.out[fam.ind, 8] + 1
print(paste0("S moved ", fam.ind))
} #end S move loop
} #end S if
if(length(E.disp.ind)>0){
for(E in 1:length(E.disp.ind)){
disp.move = rgamma(1, shape = disp.dist[1], scale = disp.dist[2])
poss.cells = which(dist < disp.move)
if(length(poss.cells)>1){
E.cell.moved = sample(poss.cells, 1, replace = FALSE)
}else{E.cell.moved = poss.cells}
fam.ind = which(pop.out[,3] == E.cell.moved[E])
pop.out[fam.ind, 1] = pop.out[fam.ind, 1] + 1
pop.out[fam.ind, 9] = pop.out[fam.ind, 9] + 1
} #end E move loop
} #end E if
if(length(I.disp.ind)>0){
for(I in 1:length(I.disp.ind)){
disp.move = rgamma(1, shape = disp.dist[1], scale = disp.dist[2])
poss.cells = which(dist < disp.move)
if(length(poss.cells)>1){
I.cell.moved = sample(poss.cells, 1, replace = FALSE)
}else{I.cell.moved = poss.cells}
fam.ind = which(pop.out[,3] == I.cell.moved[I])
pop.out[fam.ind, 1] = pop.out[fam.ind, 1] + 1
pop.out[fam.ind, 10] = pop.out[fam.ind, 10] + 1
} #end I move loop
} #end I if
} #end for loop
} #end thyme if
hist(pop[,1] - pop.out[,1])
pop.out = pop
p.disp = 1 - exp(-dispersal)
if(thyme %in% disp.times){
for(z in 1:dim(pop.out)[1]){
S.disp.ind = rbinom(1, pop.out[z, 8], p.disp)
E.disp.ind = rbinom(1, pop.out[z, 9], p.disp)
I.disp.ind = rbinom(1, pop.out[z, 10], p.disp)
tot.disp.ind = S.disp.ind + E.disp.ind + I.disp.ind
pop.out[z, 1] = pop.out[z, 1] - tot.disp.ind
pop.out[z, 8] = pop.out[z, 8] - S.disp.ind
pop.out[z, 9] = pop.out[z, 9] - E.disp.ind
pop.out[z, 10] = pop.out[z, 10] - I.disp.ind
dist =  sqrt((centroids[, 1] - pop.out[z, 5])^2 + (centroids[, 2] - pop.out[z, 6])^2)
poss.cells = which(dist < disp.dist)
fams.in.range = subset(pop.out, pop.out[,3] %in% poss.cells)
if(length(S.disp.ind)>0){
for(S in 1:length(S.disp.ind)){
disp.move = rgamma(1, shape = disp.dist[1], scale = disp.dist[2])
poss.cells = which(dist < disp.move)
if(length(poss.cells)>1){
S.cell.moved = sample(poss.cells, 1, replace = FALSE)
}else{S.cell.moved = poss.cells}
fam.ind = which(pop.out[,3] == S.cell.moved[S])
pop.out[fam.ind, 1] = pop.out[fam.ind, 1] + 1
pop.out[fam.ind, 8] = pop.out[fam.ind, 8] + 1
print(paste0("S moved ", fam.ind))
} #end S move loop
} #end S if
if(length(E.disp.ind)>0){
for(E in 1:length(E.disp.ind)){
disp.move = rgamma(1, shape = disp.dist[1], scale = disp.dist[2])
poss.cells = which(dist < disp.move)
if(length(poss.cells)>1){
E.cell.moved = sample(poss.cells, 1, replace = FALSE)
}else{E.cell.moved = poss.cells}
fam.ind = which(pop.out[,3] == E.cell.moved[E])
pop.out[fam.ind, 1] = pop.out[fam.ind, 1] + 1
pop.out[fam.ind, 9] = pop.out[fam.ind, 9] + 1
} #end E move loop
} #end E if
if(length(I.disp.ind)>0){
for(I in 1:length(I.disp.ind)){
disp.move = rgamma(1, shape = disp.dist[1], scale = disp.dist[2])
poss.cells = which(dist < disp.move)
if(length(poss.cells)>1){
I.cell.moved = sample(poss.cells, 1, replace = FALSE)
}else{I.cell.moved = poss.cells}
fam.ind = which(pop.out[,3] == I.cell.moved[I])
pop.out[fam.ind, 1] = pop.out[fam.ind, 1] + 1
pop.out[fam.ind, 10] = pop.out[fam.ind, 10] + 1
} #end I move loop
} #end I if
} #end for loop
} #end thyme if
hist(pop[,1] - pop.out[,1])
pop.out = pop
disp.out = data.frame()
p.disp = 1 - exp(-dispersal)
if(thyme %in% disp.times){
for(z in 1:dim(pop.out)[1]){
S.disp.ind = rbinom(1, pop.out[z, 8], p.disp)
E.disp.ind = rbinom(1, pop.out[z, 9], p.disp)
I.disp.ind = rbinom(1, pop.out[z, 10], p.disp)
tot.disp.ind = S.disp.ind + E.disp.ind + I.disp.ind
pop.out[z, 1] = pop.out[z, 1] - tot.disp.ind
pop.out[z, 8] = pop.out[z, 8] - S.disp.ind
pop.out[z, 9] = pop.out[z, 9] - E.disp.ind
pop.out[z, 10] = pop.out[z, 10] - I.disp.ind
dist =  sqrt((centroids[, 1] - pop.out[z, 5])^2 + (centroids[, 2] - pop.out[z, 6])^2)
poss.cells = which(dist < disp.dist)
fams.in.range = subset(pop.out, pop.out[,3] %in% poss.cells)
if(length(S.disp.ind)>0){
for(S in 1:length(S.disp.ind)){
disp.move = rgamma(1, shape = disp.dist[1], scale = disp.dist[2])
poss.cells = which(dist < disp.move)
if(length(poss.cells)>1){
S.cell.moved = sample(poss.cells, 1, replace = FALSE)
}else{S.cell.moved = poss.cells}
fam.ind = which(pop.out[,3] == S.cell.moved[S])
pop.out[fam.ind, 1] = pop.out[fam.ind, 1] + 1
pop.out[fam.ind, 8] = pop.out[fam.ind, 8] + 1
disp.out = rbind(disp.out, c(time = thyme, ind = "S", old.loc = pop.out[z,3], new.loc = pop.out[fam.ind,3]))
} #end S move loop
} #end S if
if(length(E.disp.ind)>0){
for(E in 1:length(E.disp.ind)){
disp.move = rgamma(1, shape = disp.dist[1], scale = disp.dist[2])
poss.cells = which(dist < disp.move)
if(length(poss.cells)>1){
E.cell.moved = sample(poss.cells, 1, replace = FALSE)
}else{E.cell.moved = poss.cells}
fam.ind = which(pop.out[,3] == E.cell.moved[E])
pop.out[fam.ind, 1] = pop.out[fam.ind, 1] + 1
pop.out[fam.ind, 9] = pop.out[fam.ind, 9] + 1
disp.out = rbind(disp.out, c(time = thyme, ind = "E", old.loc = pop.out[z,3], new.loc = pop.out[fam.ind,3]))
} #end E move loop
} #end E if
if(length(I.disp.ind)>0){
for(I in 1:length(I.disp.ind)){
disp.move = rgamma(1, shape = disp.dist[1], scale = disp.dist[2])
poss.cells = which(dist < disp.move)
if(length(poss.cells)>1){
I.cell.moved = sample(poss.cells, 1, replace = FALSE)
}else{I.cell.moved = poss.cells}
fam.ind = which(pop.out[,3] == I.cell.moved[I])
pop.out[fam.ind, 1] = pop.out[fam.ind, 1] + 1
pop.out[fam.ind, 10] = pop.out[fam.ind, 10] + 1
disp.out = rbind(disp.out, c(time = thyme, ind = "I", old.loc = pop.out[z,3], new.loc = pop.out[fam.ind,3]))
} #end I move loop
} #end I if
} #end for loop
} #end thyme if
disp.out
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Write-Up/parms_table.R", echo=TRUE)
length(all.parm.names)
length(all.parm.mean)
length(all.parm.vals)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/CWDparms.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Write-Up/parms_table.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Write-Up/parms_table.R", echo=TRUE)
lenght(all.parm.mean)
length(all.parm.mean)
length(all.parm.names)
length(all.parm.vals)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_run.R", echo=TRUE)
warnings9
warnings()
test = NULL
test.add = c(1, 3, 4)
rbind(test, test.add)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_run.R", echo=TRUE)
test.comb = rbind(test, test.add)
test
test = NULL
test.add = c(1, 3, 5, )
test.add = c(1, 3, 5, 5)
test.comb = rbind(test, test.add)
test.comb
rbind(test.comb, test)
warnings()
pop
pop.out = pop
disp.out = NULL
p.disp = 1 - exp(-dispersal)
if(thyme %in% disp.times){
for(z in 1:dim(pop.out)[1]){
S.disp.ind = rbinom(1, pop.out[z, 8], p.disp)
E.disp.ind = rbinom(1, pop.out[z, 9], p.disp)
I.disp.ind = rbinom(1, pop.out[z, 10], p.disp)
tot.disp.ind = S.disp.ind + E.disp.ind + I.disp.ind
pop.out[z, 1] = pop.out[z, 1] - tot.disp.ind
pop.out[z, 8] = pop.out[z, 8] - S.disp.ind
pop.out[z, 9] = pop.out[z, 9] - E.disp.ind
pop.out[z, 10] = pop.out[z, 10] - I.disp.ind
dist =  sqrt((centroids[, 1] - pop.out[z, 5])^2 + (centroids[, 2] - pop.out[z, 6])^2)
poss.cells = which(dist < disp.dist)
fams.in.range = subset(pop.out, pop.out[,3] %in% poss.cells)
if(length(S.disp.ind)>0){
for(S in 1:length(S.disp.ind)){
disp.move = rgamma(1, shape = disp.dist[1], scale = disp.dist[2])
poss.cells = which(dist < disp.move)
poss.cells = poss.cells[!poss.cells == pop.out[z,3]]
if(length(poss.cells)>0){
S.cell.moved = sample(poss.cells, 1, replace = FALSE)
}else{S.cell.moved = poss.cells}
fam.ind = which(pop.out[,3] == S.cell.moved[S])
pop.out[fam.ind, 1] = pop.out[fam.ind, 1] + 1
pop.out[fam.ind, 8] = pop.out[fam.ind, 8] + 1
disp.out = rbind(disp.out, c(time = thyme, ind = "S", old.loc = pop.out[z,3], new.loc = pop.out[fam.ind,3]))
} #end S move loop
} #end S if
if(length(E.disp.ind)>0){
for(E in 1:length(E.disp.ind)){
disp.move = rgamma(1, shape = disp.dist[1], scale = disp.dist[2])
poss.cells = which(dist < disp.move)
poss.cells = poss.cells[!poss.cells == pop.out[z,3]]
if(length(poss.cells)>1){
E.cell.moved = sample(poss.cells, 1, replace = FALSE)
}else{E.cell.moved = poss.cells}
fam.ind = which(pop.out[,3] == E.cell.moved[E])
pop.out[fam.ind, 1] = pop.out[fam.ind, 1] + 1
pop.out[fam.ind, 9] = pop.out[fam.ind, 9] + 1
disp.out = rbind(disp.out, c(time = thyme, ind = "E", old.loc = pop.out[z,3], new.loc = pop.out[fam.ind,3]))
} #end E move loop
} #end E if
if(length(I.disp.ind)>0){
for(I in 1:length(I.disp.ind)){
disp.move = rgamma(1, shape = disp.dist[1], scale = disp.dist[2])
poss.cells = which(dist < disp.move)
poss.cells = poss.cells[!poss.cells == pop.out[z,3]]
if(length(poss.cells)>1){
I.cell.moved = sample(poss.cells, 1, replace = FALSE)
}else{I.cell.moved = poss.cells}
fam.ind = which(pop.out[,3] == I.cell.moved[I])
pop.out[fam.ind, 1] = pop.out[fam.ind, 1] + 1
pop.out[fam.ind, 10] = pop.out[fam.ind, 10] + 1
disp.out = rbind(disp.out, c(time = thyme, ind = "I", old.loc = pop.out[z,3], new.loc = pop.out[fam.ind,3]))
} #end I move loop
} #end I if
} #end for loop
} #end thyme if
thyme = 1
pop.out = pop
disp.out = NULL
p.disp = 1 - exp(-dispersal)
if(thyme %in% disp.times){
for(z in 1:dim(pop.out)[1]){
S.disp.ind = rbinom(1, pop.out[z, 8], p.disp)
E.disp.ind = rbinom(1, pop.out[z, 9], p.disp)
I.disp.ind = rbinom(1, pop.out[z, 10], p.disp)
tot.disp.ind = S.disp.ind + E.disp.ind + I.disp.ind
pop.out[z, 1] = pop.out[z, 1] - tot.disp.ind
pop.out[z, 8] = pop.out[z, 8] - S.disp.ind
pop.out[z, 9] = pop.out[z, 9] - E.disp.ind
pop.out[z, 10] = pop.out[z, 10] - I.disp.ind
dist =  sqrt((centroids[, 1] - pop.out[z, 5])^2 + (centroids[, 2] - pop.out[z, 6])^2)
poss.cells = which(dist < disp.dist)
fams.in.range = subset(pop.out, pop.out[,3] %in% poss.cells)
if(length(S.disp.ind)>0){
for(S in 1:length(S.disp.ind)){
disp.move = rgamma(1, shape = disp.dist[1], scale = disp.dist[2])
poss.cells = which(dist < disp.move)
poss.cells = poss.cells[!poss.cells == pop.out[z,3]]
if(length(poss.cells)>0){
S.cell.moved = sample(poss.cells, 1, replace = FALSE)
}else{S.cell.moved = poss.cells}
fam.ind = which(pop.out[,3] == S.cell.moved[S])
pop.out[fam.ind, 1] = pop.out[fam.ind, 1] + 1
pop.out[fam.ind, 8] = pop.out[fam.ind, 8] + 1
disp.out = rbind(disp.out, c(time = thyme, ind = "S", old.loc = pop.out[z,3], new.loc = pop.out[fam.ind,3]))
} #end S move loop
} #end S if
if(length(E.disp.ind)>0){
for(E in 1:length(E.disp.ind)){
disp.move = rgamma(1, shape = disp.dist[1], scale = disp.dist[2])
poss.cells = which(dist < disp.move)
poss.cells = poss.cells[!poss.cells == pop.out[z,3]]
if(length(poss.cells)>1){
E.cell.moved = sample(poss.cells, 1, replace = FALSE)
}else{E.cell.moved = poss.cells}
fam.ind = which(pop.out[,3] == E.cell.moved[E])
pop.out[fam.ind, 1] = pop.out[fam.ind, 1] + 1
pop.out[fam.ind, 9] = pop.out[fam.ind, 9] + 1
disp.out = rbind(disp.out, c(time = thyme, ind = "E", old.loc = pop.out[z,3], new.loc = pop.out[fam.ind,3]))
} #end E move loop
} #end E if
if(length(I.disp.ind)>0){
for(I in 1:length(I.disp.ind)){
disp.move = rgamma(1, shape = disp.dist[1], scale = disp.dist[2])
poss.cells = which(dist < disp.move)
poss.cells = poss.cells[!poss.cells == pop.out[z,3]]
if(length(poss.cells)>1){
I.cell.moved = sample(poss.cells, 1, replace = FALSE)
}else{I.cell.moved = poss.cells}
fam.ind = which(pop.out[,3] == I.cell.moved[I])
pop.out[fam.ind, 1] = pop.out[fam.ind, 1] + 1
pop.out[fam.ind, 10] = pop.out[fam.ind, 10] + 1
disp.out = rbind(disp.out, c(time = thyme, ind = "I", old.loc = pop.out[z,3], new.loc = pop.out[fam.ind,3]))
} #end I move loop
} #end I if
} #end for loop
} #end thyme if
disp.out
pop.out = pop
disp.out = data.frame()
p.disp = 1 - exp(-dispersal)
if(thyme %in% disp.times){
for(z in 1:dim(pop.out)[1]){
S.disp.ind = rbinom(1, pop.out[z, 8], p.disp)
E.disp.ind = rbinom(1, pop.out[z, 9], p.disp)
I.disp.ind = rbinom(1, pop.out[z, 10], p.disp)
tot.disp.ind = S.disp.ind + E.disp.ind + I.disp.ind
pop.out[z, 1] = pop.out[z, 1] - tot.disp.ind
pop.out[z, 8] = pop.out[z, 8] - S.disp.ind
pop.out[z, 9] = pop.out[z, 9] - E.disp.ind
pop.out[z, 10] = pop.out[z, 10] - I.disp.ind
dist =  sqrt((centroids[, 1] - pop.out[z, 5])^2 + (centroids[, 2] - pop.out[z, 6])^2)
poss.cells = which(dist < disp.dist)
fams.in.range = subset(pop.out, pop.out[,3] %in% poss.cells)
if(length(S.disp.ind)>0){
for(S in 1:length(S.disp.ind)){
disp.move = rgamma(1, shape = disp.dist[1], scale = disp.dist[2])
poss.cells = which(dist < disp.move)
poss.cells = poss.cells[!poss.cells == pop.out[z,3]]
if(length(poss.cells)>0){
S.cell.moved = sample(poss.cells, 1, replace = FALSE)
}else{S.cell.moved = poss.cells}
fam.ind = which(pop.out[,3] == S.cell.moved[S])
pop.out[fam.ind, 1] = pop.out[fam.ind, 1] + 1
pop.out[fam.ind, 8] = pop.out[fam.ind, 8] + 1
disp.out = rbind(disp.out, c(time = thyme, ind = "S", old.loc = pop.out[z,3], new.loc = pop.out[fam.ind,3]))
} #end S move loop
} #end S if
if(length(E.disp.ind)>0){
for(E in 1:length(E.disp.ind)){
disp.move = rgamma(1, shape = disp.dist[1], scale = disp.dist[2])
poss.cells = which(dist < disp.move)
poss.cells = poss.cells[!poss.cells == pop.out[z,3]]
if(length(poss.cells)>1){
E.cell.moved = sample(poss.cells, 1, replace = FALSE)
}else{E.cell.moved = poss.cells}
fam.ind = which(pop.out[,3] == E.cell.moved[E])
pop.out[fam.ind, 1] = pop.out[fam.ind, 1] + 1
pop.out[fam.ind, 9] = pop.out[fam.ind, 9] + 1
disp.out = rbind(disp.out, c(time = thyme, ind = "E", old.loc = pop.out[z,3], new.loc = pop.out[fam.ind,3]))
} #end E move loop
} #end E if
if(length(I.disp.ind)>0){
for(I in 1:length(I.disp.ind)){
disp.move = rgamma(1, shape = disp.dist[1], scale = disp.dist[2])
poss.cells = which(dist < disp.move)
poss.cells = poss.cells[!poss.cells == pop.out[z,3]]
if(length(poss.cells)>1){
I.cell.moved = sample(poss.cells, 1, replace = FALSE)
}else{I.cell.moved = poss.cells}
fam.ind = which(pop.out[,3] == I.cell.moved[I])
pop.out[fam.ind, 1] = pop.out[fam.ind, 1] + 1
pop.out[fam.ind, 10] = pop.out[fam.ind, 10] + 1
disp.out = rbind(disp.out, c(time = thyme, ind = "I", old.loc = pop.out[z,3], new.loc = pop.out[fam.ind,3]))
} #end I move loop
} #end I if
} #end for loop
} #end thyme if
warnings()
disp.out
pop.out = pop
disp.out = data.frame()
p.disp = 1 - exp(-dispersal)
if(thyme %in% disp.times){
for(z in 1:dim(pop.out)[1]){
S.disp.ind = rbinom(1, pop.out[z, 8], p.disp)
E.disp.ind = rbinom(1, pop.out[z, 9], p.disp)
I.disp.ind = rbinom(1, pop.out[z, 10], p.disp)
tot.disp.ind = S.disp.ind + E.disp.ind + I.disp.ind
pop.out[z, 1] = pop.out[z, 1] - tot.disp.ind
pop.out[z, 8] = pop.out[z, 8] - S.disp.ind
pop.out[z, 9] = pop.out[z, 9] - E.disp.ind
pop.out[z, 10] = pop.out[z, 10] - I.disp.ind
dist =  sqrt((centroids[, 1] - pop.out[z, 5])^2 + (centroids[, 2] - pop.out[z, 6])^2)
poss.cells = which(dist < disp.dist)
fams.in.range = subset(pop.out, pop.out[,3] %in% poss.cells)
if(length(S.disp.ind)>0){
for(S in 1:length(S.disp.ind)){
disp.move = rgamma(1, shape = disp.dist[1], scale = disp.dist[2])
poss.cells = which(dist < disp.move)
poss.cells = poss.cells[!poss.cells == pop.out[z,3]]
if(length(poss.cells) > 0){
S.cell.moved = sample(poss.cells, 1, replace = FALSE)
}else{S.cell.moved = pop.out[z,3]}
fam.ind = which(pop.out[,3] == S.cell.moved[S])
pop.out[fam.ind, 1] = pop.out[fam.ind, 1] + 1
pop.out[fam.ind, 8] = pop.out[fam.ind, 8] + 1
disp.out = rbind(disp.out, c(time = thyme, ind = "S", old.loc = pop.out[z,3], new.loc = pop.out[fam.ind,3]))
} #end S move loop
} #end S if
if(length(E.disp.ind)>0){
for(E in 1:length(E.disp.ind)){
disp.move = rgamma(1, shape = disp.dist[1], scale = disp.dist[2])
poss.cells = which(dist < disp.move)
poss.cells = poss.cells[!poss.cells == pop.out[z,3]]
if(length(poss.cells) > 0){
E.cell.moved = sample(poss.cells, 1, replace = FALSE)
}else{E.cell.moved = pop.out[z,3]}
fam.ind = which(pop.out[,3] == E.cell.moved[E])
pop.out[fam.ind, 1] = pop.out[fam.ind, 1] + 1
pop.out[fam.ind, 9] = pop.out[fam.ind, 9] + 1
disp.out = rbind(disp.out, c(time = thyme, ind = "E", old.loc = pop.out[z,3], new.loc = pop.out[fam.ind,3]))
} #end E move loop
} #end E if
if(length(I.disp.ind)>0){
for(I in 1:length(I.disp.ind)){
disp.move = rgamma(1, shape = disp.dist[1], scale = disp.dist[2])
poss.cells = which(dist < disp.move)
poss.cells = poss.cells[!poss.cells == pop.out[z,3]]
if(length(poss.cells) > 0){
I.cell.moved = sample(poss.cells, 1, replace = FALSE)
}else{I.cell.moved = pop.out[z,3]}
fam.ind = which(pop.out[,3] == I.cell.moved[I])
pop.out[fam.ind, 1] = pop.out[fam.ind, 1] + 1
pop.out[fam.ind, 10] = pop.out[fam.ind, 10] + 1
disp.out = rbind(disp.out, c(time = thyme, ind = "I", old.loc = pop.out[z,3], new.loc = pop.out[fam.ind,3]))
} #end I move loop
} #end I if
} #end for loop
} #end thyme if
thyme
disp.out
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_run.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_run.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_run.R", echo=TRUE)
test = data.frame()
names(test) = c("one", "two")
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_run.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/SimulateOneRunCWD.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_run.R", echo=TRUE)
pop.out = pop
disp.out = data.frame()
p.disp = 1 - exp(-dispersal)
if(thyme %in% disp.times){
for(z in 1:dim(pop.out)[1]){
S.disp.ind = rbinom(1, pop.out[z, 8], p.disp)
E.disp.ind = rbinom(1, pop.out[z, 9], p.disp)
I.disp.ind = rbinom(1, pop.out[z, 10], p.disp)
tot.disp.ind = S.disp.ind + E.disp.ind + I.disp.ind
pop.out[z, 1] = pop.out[z, 1] - tot.disp.ind
pop.out[z, 8] = pop.out[z, 8] - S.disp.ind
pop.out[z, 9] = pop.out[z, 9] - E.disp.ind
pop.out[z, 10] = pop.out[z, 10] - I.disp.ind
dist =  sqrt((centroids[, 1] - pop.out[z, 5])^2 + (centroids[, 2] - pop.out[z, 6])^2)
poss.cells = which(dist < disp.dist)
fams.in.range = subset(pop.out, pop.out[,3] %in% poss.cells)
if(length(S.disp.ind)>0){
for(S in 1:length(S.disp.ind)){
disp.move = rgamma(1, shape = disp.dist[1], scale = disp.dist[2])
poss.cells = which(dist < disp.move)
poss.fids = pop[which(pop[,3] == poss.cells), 12]
poss.fids = poss.fids[!poss.fids == pop.out[z, 12]]
if(length(poss.fids) > 0){
S.cell.moved = sample(poss.fids, 1, replace = FALSE)
}else{S.cell.moved = pop.out[z,12]}
fam.ind = which(pop.out[,12] == S.cell.moved)
pop.out[fam.ind, 1] = pop.out[fam.ind, 1] + 1
pop.out[fam.ind, 8] = pop.out[fam.ind, 8] + 1
disp.out = rbind(disp.out, c(time = thyme, ind = "S", old.loc = pop.out[z,3], new.loc = pop.out[fam.ind,3]))
} #end S move loop
} #end S if
if(length(E.disp.ind)>0){
for(E in 1:length(E.disp.ind)){
disp.move = rgamma(1, shape = disp.dist[1], scale = disp.dist[2])
poss.cells = which(dist < disp.move)
poss.fids = pop[which(pop[,3] == poss.cells), 12]
poss.fids = poss.fids[!poss.fids == pop.out[z, 12]]
if(length(poss.fids) > 0){
E.cell.moved = sample(poss.fids, 1, replace = FALSE)
}else{E.cell.moved = pop.out[z,12]}
fam.ind = which(pop.out[,12] == E.cell.moved[E])
print(fam.ind)
pop.out[fam.ind, 1] = pop.out[fam.ind, 1] + 1
pop.out[fam.ind, 9] = pop.out[fam.ind, 9] + 1
disp.out = rbind(disp.out, c(time = thyme, ind = "E", old.loc = pop.out[z,3], new.loc = pop.out[fam.ind,3]))
} #end E move loop
} #end E if
if(length(I.disp.ind)>0){
for(I in 1:length(I.disp.ind)){
disp.move = rgamma(1, shape = disp.dist[1], scale = disp.dist[2])
poss.cells = which(dist < disp.move)
poss.fids = pop[which(pop[, 3] == poss.cells), 12]
poss.fids = poss.fids[!poss.fids == pop.out[z, 12]]
if(length(poss.fids) > 0){
I.cell.moved = sample(poss.fids, 1, replace = FALSE)
}else{I.cell.moved = pop.out[z, 12]}
fam.ind = which(pop.out[,12] == I.cell.moved[I])
print(fam.ind)
pop.out[fam.ind, 1] = pop.out[fam.ind, 1] + 1
pop.out[fam.ind, 10] = pop.out[fam.ind, 10] + 1
disp.out = rbind(disp.out, c(time = thyme, ind = "I", old.loc = pop.out[z,3], new.loc = pop.out[fam.ind,3]))
} #end I move loop
} #end I if
} #end for loop
} #end thyme if
print(disp.out)
names(disp.out) = c("time", "ind", "old.loc", "new.loc")
disp.out
thyme
names(disp.out)
names(disp.out) = c("1", "2")
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_run.R", echo=TRUE)
warnings()
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_run.R", echo=TRUE)
source("C:/Users/SIU856560341/Desktop/CWD_Modeling/Metapop_Model/Scripts/testing_run.R", echo=TRUE)
onerun[[17]]
